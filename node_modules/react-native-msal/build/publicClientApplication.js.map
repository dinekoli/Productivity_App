{"version":3,"file":"publicClientApplication.js","sourceRoot":"","sources":["../src/publicClientApplication.ts"],"names":[],"mappings":"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","sourcesContent":["import { PublicClientApplication as MSALPublicClientApplication } from '@azure/msal-browser';\n\nimport type {\n  MSALConfiguration,\n  MSALInteractiveParams,\n  MSALSilentParams,\n  MSALAccount,\n  MSALSignoutParams,\n  MSALResult,\n  IPublicClientApplication,\n} from './types';\nimport { MSALPromptType } from './types';\n\nexport class PublicClientApplication implements IPublicClientApplication {\n  private _pca: MSALPublicClientApplication;\n\n  constructor(private readonly config: MSALConfiguration) {\n    this._pca = new MSALPublicClientApplication(this.config);\n  }\n\n  public async init() {\n    return this;\n  }\n\n  public async acquireToken(params: MSALInteractiveParams) {\n    const { promptType, ...paramsWithoutPromptType } = params;\n    const { accessToken, account, expiresOn, idToken, idTokenClaims, scopes, tenantId } =\n      await this._pca.acquireTokenPopup(\n        promptType ? { ...paramsWithoutPromptType, prompt: promptTypeToString(promptType) } : paramsWithoutPromptType\n      );\n    const result: MSALResult = {\n      accessToken,\n      account: {\n        identifier: account!.homeAccountId,\n        environment: account!.environment,\n        tenantId: account!.tenantId,\n        username: account!.username,\n        claims: idTokenClaims,\n      },\n      expiresOn: expiresOn?.getTime()!,\n      idToken,\n      scopes,\n      tenantId,\n    };\n    return result;\n  }\n\n  public async acquireTokenSilent(params: MSALSilentParams) {\n    const { accessToken, account, expiresOn, idToken, idTokenClaims, scopes, tenantId } =\n      await this._pca.acquireTokenSilent({\n        ...params,\n        account: {\n          ...params.account,\n          homeAccountId: params.account.identifier,\n          environment: params.account.environment ?? '',\n          localAccountId: '',\n        },\n      });\n    const result: MSALResult = {\n      accessToken,\n      account: {\n        identifier: account?.homeAccountId!,\n        environment: account?.environment,\n        tenantId: account?.tenantId!,\n        username: account?.username!,\n        claims: idTokenClaims,\n      },\n      expiresOn: expiresOn?.getTime()!,\n      idToken,\n      scopes,\n      tenantId,\n    };\n    return result;\n  }\n\n  public getAccounts() {\n    const accounts = this._pca.getAllAccounts();\n    return Promise.resolve(\n      accounts.map((a) => {\n        const { homeAccountId: identifier, environment, tenantId, username } = a;\n        const account: MSALAccount = { identifier, environment, tenantId, username };\n        return account;\n      })\n    );\n  }\n\n  public getAccount(accountIdentifier: string) {\n    const account = this._pca.getAccountByHomeId(accountIdentifier);\n    if (account == null) {\n      return Promise.reject(Error('Account not found'));\n    } else {\n      const { homeAccountId: identifier, environment, tenantId, username } = account;\n      const msalAccount: MSALAccount = { identifier, environment, tenantId, username };\n      return Promise.resolve(msalAccount);\n    }\n  }\n\n  public async removeAccount(account: MSALAccount) {\n    await this._pca.logoutRedirect({\n      account: {\n        ...account,\n        homeAccountId: account.identifier,\n        environment: account.environment ?? '',\n        localAccountId: '',\n      },\n    });\n    return true;\n  }\n\n  public async signOut(params: MSALSignoutParams) {\n    return await this.removeAccount(params.account);\n  }\n}\n\ntype PromptTypeString = 'consent' | 'login' | 'select_account' | 'none';\nfunction promptTypeToString(promptType: MSALPromptType): PromptTypeString {\n  switch (promptType) {\n    case MSALPromptType.SELECT_ACCOUNT:\n      return 'select_account';\n    case MSALPromptType.LOGIN:\n      return 'login';\n    case MSALPromptType.CONSENT:\n      return 'consent';\n    case MSALPromptType.WHEN_REQUIRED:\n      return 'none';\n  }\n}\n"]}